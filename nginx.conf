
user  nginx;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    
    access_log    /home/nginx/nginx_http.log;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

#   打在 80 端口的 http 请求转为 https，需要有 server 配置了 listen 443 ssl
#    server {
#        listen 80;
#        rewrite ^/(.*)$ https://127.0.0.1/$1 permanent;
#    }

    server {
        listen       80;
        #listen       443 ssl;
        #server_name skin.nekomc.fun;
        #server_name  localhost;
        server_name  skin.neko.cxlm.work;
        #ssl_certificate /home/nginx/ssl/skin.nekomc.fun.pem;
        #ssl_certificate_key /home/nginx/ssl/skin.nekomc.fun.key;
        #ssl_session_cache shared:SSL:1m;

        root /home/nginx/skin/public;
        index  index.php index.html;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
# 诡异现象：下面这个配置缺失时静态资源无法访问，加上后好了，关键是再去掉也能访问了，怀疑是缓存导致
            if (!-e $request_filename){ 
                rewrite ^/(.*) /index.php last; 
            }
        }

# 疑似无用
#        location ~* .(jpg|gif|png|css|js|json)$ {
#            root /home/nginx/skin/public;
#        }

        location ~ \.php$ {
            fastcgi_pass   127.0.0.1:8848;
            fastcgi_index  index.php;
            #fastcgi_param  SCRIPT_FILENAME /home/nginx/skin/public$fastcgi_script_name;
            #fastcgi_param  PATH_INFO $fastcgi_script_name;
            include        /usr/local/nginx/conf/fastcgi.conf;
        }

    }

    server {
        listen       443 ssl;
        # 域名绑定后使用
        # server_name  wiki.nekomc.fun;
        # server_name localhost;
        server_name  wiki.neko.cxlm.work;
        
        ssl_certificate  /home/nginx/ssl/wiki.nekomc.fun.pem;
        ssl_certificate_key  /home/nginx/ssl/wiki.nekomc.fun.key;
        ssl_session_cache  shared:SSL:1m;

        location / {
            proxy_pass http://127.0.0.1:8171;
            proxy_buffering off;
        }
    }


    server {
        listen       443 ssl;
        server_name  www.nekomc.fun;

        ssl_certificate  /home/nginx/ssl/www.nekomc.fun.pem;
        ssl_certificate_key  /home/nginx/ssl/www.nekomc.fun.key;
        ssl_session_cache  shared:SSL:1m;

        # 静态文件路径，因暂时没有主页，用静态文件充当主页
        # location /static/ {
        location / {
            root   /home/nginx/site;
            # proxy_pass http://127.0.0.1:8171;
            index  index.html index.htm;
        }
        
        # 自定义 404 页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
